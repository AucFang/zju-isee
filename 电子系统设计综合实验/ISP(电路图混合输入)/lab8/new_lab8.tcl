
########## Tcl recorder starts at 05/01/23 09:21:25 ##########

set version "2.1"
set proj_dir "D:/isp/new_lab8"
cd $proj_dir

# Get directory paths
set pver $version
regsub -all {\.} $pver {_} pver
set lscfile "lsc_"
append lscfile $pver ".ini"
set lsvini_dir [lindex [array get env LSC_INI_PATH] 1]
set lsvini_path [file join $lsvini_dir $lscfile]
if {[catch {set fid [open $lsvini_path]} msg]} {
	 puts "File Open Error: $lsvini_path"
	 return false
} else {set data [read $fid]; close $fid }
foreach line [split $data '\n'] { 
	set lline [string tolower $line]
	set lline [string trim $lline]
	if {[string compare $lline "\[paths\]"] == 0} { set path 1; continue}
	if {$path && [regexp {^\[} $lline]} {set path 0; break}
	if {$path && [regexp {^bin} $lline]} {set cpld_bin $line; continue}
	if {$path && [regexp {^fpgapath} $lline]} {set fpga_dir $line; continue}
	if {$path && [regexp {^fpgabinpath} $lline]} {set fpga_bin $line}}

set cpld_bin [string range $cpld_bin [expr [string first "=" $cpld_bin]+1] end]
regsub -all "\"" $cpld_bin "" cpld_bin
set cpld_bin [file join $cpld_bin]
set install_dir [string range $cpld_bin 0 [expr [string first "ispcpld" $cpld_bin]-2]]
regsub -all "\"" $install_dir "" install_dir
set install_dir [file join $install_dir]
set fpga_dir [string range $fpga_dir [expr [string first "=" $fpga_dir]+1] end]
regsub -all "\"" $fpga_dir "" fpga_dir
set fpga_dir [file join $fpga_dir]
set fpga_bin [string range $fpga_bin [expr [string first "=" $fpga_bin]+1] end]
regsub -all "\"" $fpga_bin "" fpga_bin
set fpga_bin [file join $fpga_bin]

if {[string match "*$fpga_bin;*" $env(PATH)] == 0 } {
   set env(PATH) "$fpga_bin;$env(PATH)" }

if {[string match "*$cpld_bin;*" $env(PATH)] == 0 } {
   set env(PATH) "$cpld_bin;$env(PATH)" }

lappend auto_path [file join $install_dir "ispcpld" "tcltk" "lib" "ispwidget" "runproc"]
package require runcmd

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" calculator.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:21:25 ###########


########## Tcl recorder starts at 05/01/23 09:31:48 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" calculator.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:31:48 ###########


########## Tcl recorder starts at 05/17/23 09:58:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" calculator.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 09:58:50 ###########


########## Tcl recorder starts at 05/17/23 09:59:10 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 09:59:10 ###########


########## Tcl recorder starts at 05/17/23 09:59:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 09:59:19 ###########


########## Tcl recorder starts at 05/17/23 09:59:27 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER
-lib \"work\" -ver new_lab8.h decoder.v
-output_edif DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_lse.env
file delete DECODER.synproj

########## Tcl recorder end at 05/17/23 09:59:27 ###########


########## Tcl recorder starts at 05/17/23 10:10:49 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:10:49 ###########


########## Tcl recorder starts at 05/17/23 10:10:50 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER
-lib \"work\" -ver new_lab8.h decoder.v
-output_edif DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_lse.env
file delete DECODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER.edi -out DECODER.bl0 -err automake.err -log DECODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:10:50 ###########


########## Tcl recorder starts at 05/17/23 10:11:33 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:11:33 ###########


########## Tcl recorder starts at 05/17/23 10:11:39 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER
-lib \"work\" -ver new_lab8.h decoder.v
-output_edif DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_lse.env
file delete DECODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER.edi -out DECODER.bl0 -err automake.err -log DECODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:11:39 ###########


########## Tcl recorder starts at 05/17/23 10:11:49 ##########

# Commands to make the Process: 
# Verilog Test Fixture Template
if [runCmd "\"$cpld_bin/vlog2jhd\" -tfi -proj new_lab8 -ext .tft -mod DECODER -out DECODER -predefine new_lab8.h -tpl \"$install_dir/ispcpld/generic/verilog/tft.tft\" decoder.v"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:11:49 ###########


########## Tcl recorder starts at 05/17/23 10:12:03 ##########

# Commands to make the Process: 
# ABEL Test Vector Template
if [runCmd "\"$cpld_bin/vlog2jhd\" -tfi -proj new_lab8 -mod DECODER -out DECODER -predefine new_lab8.h -tpl \"$install_dir/ispcpld/plsi/abel/plsiabt.tft\" -ext abt -p \"$install_dir/ispcpld/generic\" decoder.v"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:12:03 ###########


########## Tcl recorder starts at 05/17/23 10:13:31 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" calculator.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:13:31 ###########


########## Tcl recorder starts at 05/17/23 10:13:31 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup calculator.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"calculator.bls\" -o \"calculator.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:13:31 ###########


########## Tcl recorder starts at 05/17/23 10:15:58 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt test.wdl -network=new_lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i calculator.bl0 -o calculator.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER
-lib \"work\" -ver new_lab8.h decoder.v
-output_edif DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_lse.env
file delete DECODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER.edi -out DECODER.bl0 -err automake.err -log DECODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"calculator.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod calculator @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre7 -ini simcpls.ini -unit simcp.pre7
-cfg machgen.fdk test.ltv -map calculator.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 10:15:58 ###########


########## Tcl recorder starts at 05/01/23 10:24:05 ##########

# Commands to make the Process: 
# Functional Simulation
# - none -
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre7 -ini simcpls.ini -unit simcp.pre7
-cfg machgen.fdk test.ltv -map calculator.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:24:05 ###########


########## Tcl recorder starts at 05/01/23 10:32:55 ##########

# Commands to make the Process: 
# Functional Simulation
# - none -
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre7 -ini simcpls.ini -unit simcp.pre7
-cfg machgen.fdk test.ltv -map calculator.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:32:55 ###########


########## Tcl recorder starts at 05/01/23 11:31:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:31:59 ###########


########## Tcl recorder starts at 05/01/23 11:32:13 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:32:13 ###########


########## Tcl recorder starts at 05/01/23 11:32:43 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:32:43 ###########


########## Tcl recorder starts at 05/01/23 11:36:22 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:22 ###########


########## Tcl recorder starts at 05/01/23 11:36:31 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:31 ###########


########## Tcl recorder starts at 05/01/23 11:36:32 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:32 ###########


########## Tcl recorder starts at 05/01/23 11:36:32 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:32 ###########


########## Tcl recorder starts at 05/01/23 11:36:36 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:36 ###########


########## Tcl recorder starts at 05/01/23 11:36:37 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:37 ###########


########## Tcl recorder starts at 05/01/23 11:36:38 ##########

# Commands to make the Process: 
# Compiled Equations
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/blif2eqn\" DECODE_MODULE.bl0 -o DECODE_MODULE.eq0  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:38 ###########


########## Tcl recorder starts at 05/01/23 11:36:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:41 ###########


########## Tcl recorder starts at 05/01/23 11:36:42 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:42 ###########


########## Tcl recorder starts at 05/01/23 11:36:42 ##########

# Commands to make the Process: 
# Signal Cross Reference
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:42 ###########


########## Tcl recorder starts at 05/01/23 11:36:47 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:47 ###########


########## Tcl recorder starts at 05/01/23 11:36:47 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:47 ###########


########## Tcl recorder starts at 05/01/23 11:36:48 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DECODE_MODULE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:48 ###########


########## Tcl recorder starts at 05/01/23 11:37:14 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:37:14 ###########


########## Tcl recorder starts at 05/01/23 12:31:21 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:31:21 ###########


########## Tcl recorder starts at 05/01/23 12:31:26 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:31:26 ###########


########## Tcl recorder starts at 05/01/23 12:31:33 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:31:33 ###########


########## Tcl recorder starts at 05/01/23 12:31:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:31:34 ###########


########## Tcl recorder starts at 05/01/23 12:31:34 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:31:34 ###########


########## Tcl recorder starts at 05/01/23 12:31:38 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:31:38 ###########


########## Tcl recorder starts at 05/01/23 12:31:38 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:31:38 ###########


########## Tcl recorder starts at 05/01/23 12:31:39 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" ENCODER"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:31:39 ###########


########## Tcl recorder starts at 05/01/23 12:33:49 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 12:33:49 ###########


########## Tcl recorder starts at 05/01/23 13:51:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 13:51:34 ###########


########## Tcl recorder starts at 05/01/23 13:51:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 13:51:40 ###########


########## Tcl recorder starts at 05/01/23 13:51:49 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 13:51:49 ###########


########## Tcl recorder starts at 05/01/23 13:51:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 13:51:50 ###########


########## Tcl recorder starts at 05/01/23 13:51:51 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/01/23 13:51:51 ###########


########## Tcl recorder starts at 05/17/23 14:42:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 14:42:40 ###########


########## Tcl recorder starts at 05/17/23 14:42:41 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/17/23 14:42:41 ###########


########## Tcl recorder starts at 05/17/23 14:42:47 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/naf2sym\" CALCULATE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 14:42:47 ###########


########## Tcl recorder starts at 05/17/23 15:29:52 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:29:52 ###########


########## Tcl recorder starts at 05/17/23 15:30:18 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:30:18 ###########


########## Tcl recorder starts at 05/17/23 15:32:23 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:32:23 ###########


########## Tcl recorder starts at 05/17/23 15:32:40 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj

########## Tcl recorder end at 05/17/23 15:32:40 ###########


########## Tcl recorder starts at 05/17/23 15:32:44 ##########

# Commands to make the Process: 
# Compile EDIF File
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:32:44 ###########


########## Tcl recorder starts at 05/17/23 15:32:53 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/naf2sym\" DECODER_4"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:32:53 ###########


########## Tcl recorder starts at 05/17/23 15:37:22 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_5.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:37:22 ###########


########## Tcl recorder starts at 05/17/23 15:38:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_5.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:38:57 ###########


########## Tcl recorder starts at 05/17/23 15:39:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:39:05 ###########


########## Tcl recorder starts at 05/17/23 15:39:09 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj

########## Tcl recorder end at 05/17/23 15:39:09 ###########


########## Tcl recorder starts at 05/17/23 15:39:14 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/naf2sym\" DECODER_5"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:39:14 ###########


########## Tcl recorder starts at 05/17/23 15:40:21 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:40:21 ###########


########## Tcl recorder starts at 05/17/23 15:40:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:40:34 ###########


########## Tcl recorder starts at 05/17/23 15:41:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 15:41:41 ###########


########## Tcl recorder starts at 05/01/23 17:21:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:21:59 ###########


########## Tcl recorder starts at 05/01/23 17:22:18 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:22:18 ###########


########## Tcl recorder starts at 05/01/23 17:23:26 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:23:26 ###########


########## Tcl recorder starts at 05/01/23 17:23:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:23:35 ###########


########## Tcl recorder starts at 05/01/23 17:24:51 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:24:51 ###########


########## Tcl recorder starts at 05/01/23 17:24:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:24:57 ###########


########## Tcl recorder starts at 05/01/23 17:24:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:24:57 ###########


########## Tcl recorder starts at 05/01/23 17:24:58 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open D_TRIGGER_lse.env w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open D_TRIGGER.synproj w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top D_TRIGGER
-lib \"work\" -ver new_lab8.h d_trigger.v
-output_edif D_TRIGGER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"D_TRIGGER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete D_TRIGGER_lse.env
file delete D_TRIGGER.synproj

########## Tcl recorder end at 05/01/23 17:24:58 ###########


########## Tcl recorder starts at 05/01/23 17:25:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:25:02 ###########


########## Tcl recorder starts at 05/01/23 17:25:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:25:02 ###########


########## Tcl recorder starts at 05/01/23 17:25:03 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" D_TRIGGER"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:25:03 ###########


########## Tcl recorder starts at 05/01/23 17:26:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:26:02 ###########


########## Tcl recorder starts at 05/01/23 17:26:51 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:26:51 ###########


########## Tcl recorder starts at 05/01/23 17:27:01 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:27:01 ###########


########## Tcl recorder starts at 05/01/23 17:27:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:27:06 ###########


########## Tcl recorder starts at 05/01/23 17:27:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:27:06 ###########


########## Tcl recorder starts at 05/01/23 17:27:07 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" D_TRIGGER"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:27:07 ###########


########## Tcl recorder starts at 05/01/23 17:28:42 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:28:42 ###########


########## Tcl recorder starts at 05/01/23 17:30:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:30:08 ###########


########## Tcl recorder starts at 05/01/23 17:41:21 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:41:21 ###########


########## Tcl recorder starts at 05/01/23 17:43:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:43:03 ###########


########## Tcl recorder starts at 05/01/23 17:43:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:43:06 ###########


########## Tcl recorder starts at 05/01/23 17:44:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:44:09 ###########


########## Tcl recorder starts at 05/01/23 17:44:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:44:19 ###########


########## Tcl recorder starts at 05/01/23 17:44:39 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:44:39 ###########


########## Tcl recorder starts at 05/01/23 17:49:44 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:49:44 ###########


########## Tcl recorder starts at 05/01/23 17:50:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:50:03 ###########


########## Tcl recorder starts at 05/01/23 17:50:12 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:50:12 ###########


########## Tcl recorder starts at 05/01/23 17:50:13 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:50:13 ###########


########## Tcl recorder starts at 05/01/23 17:50:13 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj

########## Tcl recorder end at 05/01/23 17:50:13 ###########


########## Tcl recorder starts at 05/01/23 17:50:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:50:17 ###########


########## Tcl recorder starts at 05/01/23 17:50:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:50:17 ###########


########## Tcl recorder starts at 05/01/23 17:50:18 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DIVIDER_8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:50:18 ###########


########## Tcl recorder starts at 05/01/23 17:51:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:51:09 ###########


########## Tcl recorder starts at 05/01/23 17:51:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:51:29 ###########


########## Tcl recorder starts at 05/01/23 17:51:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:51:35 ###########


########## Tcl recorder starts at 05/01/23 17:51:35 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:51:35 ###########


########## Tcl recorder starts at 05/01/23 17:52:00 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:52:00 ###########


########## Tcl recorder starts at 05/01/23 17:52:00 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:52:00 ###########


########## Tcl recorder starts at 05/01/23 17:52:01 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DIVIDER_8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:52:01 ###########


########## Tcl recorder starts at 05/01/23 17:52:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:52:19 ###########


########## Tcl recorder starts at 05/01/23 17:52:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:52:29 ###########


########## Tcl recorder starts at 05/01/23 17:54:51 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:54:51 ###########


########## Tcl recorder starts at 05/01/23 17:55:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:55:29 ###########


########## Tcl recorder starts at 05/01/23 17:55:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:55:50 ###########


########## Tcl recorder starts at 05/01/23 17:57:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:57:17 ###########


########## Tcl recorder starts at 05/01/23 18:00:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:00:59 ###########


########## Tcl recorder starts at 05/01/23 18:01:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:01:25 ###########


########## Tcl recorder starts at 05/01/23 18:01:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:01:25 ###########


########## Tcl recorder starts at 05/01/23 18:01:26 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open COLLECTOR_lse.env w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open COLLECTOR.synproj w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top COLLECTOR
-lib \"work\" -ver new_lab8.h collector.v
-output_edif COLLECTOR.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"COLLECTOR.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete COLLECTOR_lse.env
file delete COLLECTOR.synproj

########## Tcl recorder end at 05/01/23 18:01:26 ###########


########## Tcl recorder starts at 05/01/23 18:53:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:53:40 ###########


########## Tcl recorder starts at 05/01/23 18:53:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:53:40 ###########


########## Tcl recorder starts at 05/01/23 18:53:41 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open COLLECTOR_lse.env w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open COLLECTOR.synproj w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top COLLECTOR
-lib \"work\" -ver new_lab8.h collector.v
-output_edif COLLECTOR.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"COLLECTOR.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete COLLECTOR_lse.env
file delete COLLECTOR.synproj

########## Tcl recorder end at 05/01/23 18:53:41 ###########


########## Tcl recorder starts at 05/01/23 18:53:45 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:53:45 ###########


########## Tcl recorder starts at 05/01/23 18:53:46 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:53:46 ###########


########## Tcl recorder starts at 05/01/23 18:53:47 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" COLLECTOR"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:53:47 ###########


########## Tcl recorder starts at 05/01/23 19:01:43 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:01:43 ###########


########## Tcl recorder starts at 05/01/23 19:07:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:07:40 ###########


########## Tcl recorder starts at 05/01/23 19:07:43 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:07:43 ###########


########## Tcl recorder starts at 05/01/23 19:07:45 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:07:45 ###########


########## Tcl recorder starts at 05/01/23 19:13:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:13:29 ###########


########## Tcl recorder starts at 05/01/23 19:13:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:13:59 ###########


########## Tcl recorder starts at 05/01/23 19:13:59 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:13:59 ###########


########## Tcl recorder starts at 05/01/23 19:14:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:14:41 ###########


########## Tcl recorder starts at 05/01/23 19:14:48 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:14:48 ###########


########## Tcl recorder starts at 05/01/23 19:14:48 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:14:48 ###########


########## Tcl recorder starts at 05/01/23 19:16:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:16:25 ###########


########## Tcl recorder starts at 05/01/23 19:16:27 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:16:27 ###########


########## Tcl recorder starts at 05/01/23 19:16:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:16:35 ###########


########## Tcl recorder starts at 05/01/23 19:16:36 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:16:36 ###########


########## Tcl recorder starts at 05/01/23 19:17:07 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:17:07 ###########


########## Tcl recorder starts at 05/01/23 19:17:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:17:30 ###########


########## Tcl recorder starts at 05/01/23 19:17:46 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:17:46 ###########


########## Tcl recorder starts at 05/01/23 19:17:47 ##########

# Commands to make the Process: 
# ABEL Test Vector Template
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/blif2eqn\" lab8.bl0 -o lab8.abt -testfix -template \"$install_dir/ispcpld/plsi/abel/plsiabt.tft\" -prj new_lab8 -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:17:47 ###########


########## Tcl recorder starts at 05/01/23 19:17:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:17:59 ###########


########## Tcl recorder starts at 05/01/23 19:17:59 ##########

# Commands to make the Process: 
# Verilog Test Fixture Template
if [runCmd "\"$cpld_bin/sch2tf\" -template \"$install_dir/ispcpld/generic/verilog/tft.tft\" -prj new_lab8 -ext .tft lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:17:59 ###########


########## Tcl recorder starts at 05/17/23 19:32:14 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:32:14 ###########


########## Tcl recorder starts at 05/17/23 19:32:21 ##########

# Commands to make the Process: 
# Verilog Functional Simulation
if [runCmd "\"$cpld_bin/vericode\" -ext=.vf lab8.sch"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2tf\" -prj new_lab8 lab8.sch  -template \"$install_dir/ispcpld/generic/verilog/tfi.tft\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rsp w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rsp: $rspFile"
} else {
	puts $rspFile "#insert -- NOTE: Do not edit this file.
#insert -- Auto generated by All Verilog Functional Simulation Models
#insert --
#insert vlib work
#path
#vlogdef new_lab8.h
#insert source {$cpld_bin/chipsim_cmd.tcl}
#prjInfo new_lab8.sty
#vlogSrc  lab8.vf decoder_5.v decoder_4.v calculate.v encoder.v decode_module.v
#vlogdef
#insert -- End
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/chipsim\" new_lab8.rsp new_lab8.vfl none"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rsp
if [catch {open udo.rsp w} rspFile] {
	puts stderr "Cannot create response file udo.rsp: $rspFile"
} else {
	puts $rspFile "-- ispDesignExpert Verilog Functional Simulation Template: testbench_tff.udo.
-- You may edit this file to control your simulation.
-- You may specify your design unit.
-- You may specify your waveforms.
add wave *
-- You may specify your simulation run time.
run 1000 ns
"
	close $rspFile
}
if [catch {open testbench.rsp w} rspFile] {
	puts stderr "Cannot create response file testbench.rsp: $rspFile"
} else {
	puts $rspFile "#insert -- NOTE: Do not edit this file.
#insert -- Auto generated by All Verilog Functional Simulation Models
#insert --
#insert vlib work
#path
#vlogdef new_lab8.h
#insert source {$cpld_bin/chipsim_cmd.tcl}
#prjInfo new_lab8.sty
#vlogSrc  lab8.vf decoder_5.v decoder_4.v calculate.v encoder.v decode_module.v
#vlogSrc testbench.v
#vlogdef
#stimulus vlog lab8 testbench.v
#insert vsim %<StimModule>% -voptargs=+acc -L lc4k_vlg -L mgen_vlog -L gen_aux -L vlog_macro
#youdo testbench_tff.udo
#insert -- End
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/chipsim\" testbench.rsp testbench.vdo udo.rsp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete udo.rsp
file delete testbench.rsp
# Application to view the Process: 
# Verilog Functional Simulation
if [runCmd "\"$install_dir/modeltech/win32loem/modelsim\" -do \"testbench.vdo\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:32:21 ###########


########## Tcl recorder starts at 05/17/23 19:37:34 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj

########## Tcl recorder end at 05/17/23 19:37:34 ###########


########## Tcl recorder starts at 05/17/23 19:37:54 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:37:54 ###########


########## Tcl recorder starts at 05/17/23 19:39:35 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:39:35 ###########


########## Tcl recorder starts at 05/17/23 19:39:57 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:39:57 ###########


########## Tcl recorder starts at 05/17/23 19:40:04 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:40:04 ###########


########## Tcl recorder starts at 05/17/23 19:40:09 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:40:09 ###########


########## Tcl recorder starts at 05/17/23 19:40:54 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:40:54 ###########


########## Tcl recorder starts at 05/17/23 19:42:55 ##########

# Commands to make the Process: 
# Compile EDIF File
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:42:55 ###########


########## Tcl recorder starts at 05/17/23 19:44:15 ##########

# Commands to make the Process: 
# Compiled Equations
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/blif2eqn\" DECODER_4.bl0 -o DECODER_4.eq0  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:44:15 ###########


########## Tcl recorder starts at 05/17/23 19:44:18 ##########

# Commands to make the Process: 
# Signal Cross Reference
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:44:18 ###########


########## Tcl recorder starts at 05/17/23 19:45:26 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:45:26 ###########


########## Tcl recorder starts at 05/17/23 19:45:30 ##########

# Commands to make the Process: 
# Compile EDIF File
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:45:30 ###########


########## Tcl recorder starts at 05/17/23 19:46:15 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:46:15 ###########


########## Tcl recorder starts at 05/17/23 19:46:19 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:46:19 ###########


########## Tcl recorder starts at 05/17/23 19:46:25 ##########

# Commands to make the Process: 
# Compiled Equations
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/blif2eqn\" ENCODER.bl0 -o ENCODER.eq0  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:46:25 ###########


########## Tcl recorder starts at 05/17/23 19:46:32 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open COLLECTOR_lse.env w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open COLLECTOR.synproj w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top COLLECTOR
-lib \"work\" -ver new_lab8.h collector.v
-output_edif COLLECTOR.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"COLLECTOR.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete COLLECTOR_lse.env
file delete COLLECTOR.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf COLLECTOR.edi -out COLLECTOR.bl0 -err automake.err -log COLLECTOR.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:46:32 ###########


########## Tcl recorder starts at 05/17/23 19:46:37 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:46:37 ###########


########## Tcl recorder starts at 05/17/23 19:46:41 ##########

# Commands to make the Process: 
# Verilog Functional Simulation
if [runCmd "\"$cpld_bin/vericode\" -ext=.vf lab8.sch"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2tf\" -prj new_lab8 lab8.sch  -template \"$install_dir/ispcpld/generic/verilog/tfi.tft\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rsp w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rsp: $rspFile"
} else {
	puts $rspFile "#insert -- NOTE: Do not edit this file.
#insert -- Auto generated by All Verilog Functional Simulation Models
#insert --
#insert vlib work
#path
#vlogdef new_lab8.h
#insert source {$cpld_bin/chipsim_cmd.tcl}
#prjInfo new_lab8.sty
#vlogSrc  lab8.vf collector.v divider_8.v d_trigger.v decoder_5.v decoder_4.v calculate.v encoder.v decode_module.v
#vlogdef
#insert -- End
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/chipsim\" new_lab8.rsp new_lab8.vfl none"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rsp
if [catch {open udo.rsp w} rspFile] {
	puts stderr "Cannot create response file udo.rsp: $rspFile"
} else {
	puts $rspFile "-- ispDesignExpert Verilog Functional Simulation Template: testbench_tff.udo.
-- You may edit this file to control your simulation.
-- You may specify your design unit.
-- You may specify your waveforms.
add wave *
-- You may specify your simulation run time.
run 1000 ns
"
	close $rspFile
}
if [catch {open testbench.rsp w} rspFile] {
	puts stderr "Cannot create response file testbench.rsp: $rspFile"
} else {
	puts $rspFile "#insert -- NOTE: Do not edit this file.
#insert -- Auto generated by All Verilog Functional Simulation Models
#insert --
#insert vlib work
#path
#vlogdef new_lab8.h
#insert source {$cpld_bin/chipsim_cmd.tcl}
#prjInfo new_lab8.sty
#vlogSrc  lab8.vf collector.v divider_8.v d_trigger.v decoder_5.v decoder_4.v calculate.v encoder.v decode_module.v
#vlogSrc testbench.v
#vlogdef
#stimulus vlog lab8 testbench.v
#insert vsim %<StimModule>% -voptargs=+acc -L lc4k_vlg -L mgen_vlog -L gen_aux -L vlog_macro
#youdo testbench_tff.udo
#insert -- End
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/chipsim\" testbench.rsp testbench.vdo udo.rsp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete udo.rsp
file delete testbench.rsp
# Application to view the Process: 
# Verilog Functional Simulation
if [runCmd "\"$install_dir/modeltech/win32loem/modelsim\" -do \"testbench.vdo\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:46:41 ###########


########## Tcl recorder starts at 05/17/23 19:47:15 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8test.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.blo  -keepwires -family -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" COLLECTOR.bl0 -o COLLECTOR.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -o DIVIDER_8.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open D_TRIGGER_lse.env w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open D_TRIGGER.synproj w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top D_TRIGGER
-lib \"work\" -ver new_lab8.h d_trigger.v
-output_edif D_TRIGGER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"D_TRIGGER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete D_TRIGGER_lse.env
file delete D_TRIGGER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf D_TRIGGER.edi -out D_TRIGGER.bl0 -err automake.err -log D_TRIGGER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" D_TRIGGER.bl0 -o D_TRIGGER.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -o DECODER_5.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -o ENCODER.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -o DECODE_MODULE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2tf\" -template \"$install_dir/ispcpld/plsi/latsim/plsi.tft\" -prj new_lab8 -ext .lsi lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:47:15 ###########


########## Tcl recorder starts at 05/17/23 19:55:56 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8test.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.blo  -keepwires -family -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" COLLECTOR.bl0 -o COLLECTOR.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -o DIVIDER_8.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open D_TRIGGER_lse.env w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open D_TRIGGER.synproj w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top D_TRIGGER
-lib \"work\" -ver new_lab8.h d_trigger.v
-output_edif D_TRIGGER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"D_TRIGGER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete D_TRIGGER_lse.env
file delete D_TRIGGER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf D_TRIGGER.edi -out D_TRIGGER.bl0 -err automake.err -log D_TRIGGER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" D_TRIGGER.bl0 -o D_TRIGGER.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -o DECODER_5.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -o ENCODER.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -o DECODE_MODULE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2tf\" -template \"$install_dir/ispcpld/plsi/latsim/plsi.tft\" -prj new_lab8 -ext .lsi lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 19:55:57 ###########


########## Tcl recorder starts at 05/17/23 20:00:16 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 20:00:16 ###########


########## Tcl recorder starts at 05/17/23 20:00:18 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 20:00:18 ###########


########## Tcl recorder starts at 05/17/23 20:00:43 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 20:00:43 ###########


########## Tcl recorder starts at 05/17/23 20:01:49 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 20:01:50 ###########


########## Tcl recorder starts at 05/17/23 20:02:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 20:02:05 ###########


########## Tcl recorder starts at 05/17/23 20:03:21 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 20:03:21 ###########


########## Tcl recorder starts at 05/17/23 20:03:24 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8test.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.blo  -keepwires -family -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -o DIVIDER_8.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2tf\" -template \"$install_dir/ispcpld/plsi/latsim/plsi.tft\" -prj new_lab8 -ext .lsi lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 20:03:24 ###########


########## Tcl recorder starts at 05/17/23 20:06:06 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" COLLECTOR.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" D_TRIGGER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/blifstat\" -i new_lab8.bl5 -o new_lab8.sif"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 20:06:06 ###########


########## Tcl recorder starts at 05/01/23 20:08:28 ##########

# Commands to make the Process: 
# Constraint Editor
# - none -
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:08:28 ###########


########## Tcl recorder starts at 05/01/23 20:14:32 ##########

# Commands to make the Process: 
# Constraint Editor
# - none -
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:14:32 ###########


########## Tcl recorder starts at 05/01/23 20:14:37 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:14:38 ###########


########## Tcl recorder starts at 05/01/23 20:22:37 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:22:37 ###########


########## Tcl recorder starts at 05/01/23 20:23:24 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:23:24 ###########


########## Tcl recorder starts at 05/01/23 20:42:15 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:42:15 ###########


########## Tcl recorder starts at 05/01/23 20:42:50 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:42:50 ###########


########## Tcl recorder starts at 05/01/23 20:44:39 ##########

# Commands to make the Process: 
# Functional Simulation
# - none -
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre7 -ini simcpls.ini -unit simcp.pre7
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:44:39 ###########


########## Tcl recorder starts at 05/01/23 20:44:42 ##########

# Commands to make the Process: 
# Timing Simulation
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rss w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rss: $rspFile"
} else {
	puts $rspFile "-i \"new_lab8.tt4\" -lib \"$install_dir/ispcpld/dat/lc4k\" -strategy top -sdfmdl \"$install_dir/ispcpld/dat/sdf.mdl\" -simmdl \"$install_dir/ispcpld/dat/sim.mdl\" -pla \"new_lab8.tt4\" -lci \"new_lab8.lct\" -prj \"new_lab8\" -dir \"$proj_dir\" -err automake.err -log \"new_lab8.nrp\" -exf \"lab8.exf\"  -netlist edif
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/sdf\" \"@new_lab8.rss\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rss
# Application to view the Process: 
# Timing Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.post5 -ini simcpls.ini -all simcp.post5
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 20:44:42 ###########


########## Tcl recorder starts at 05/17/23 21:16:22 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/17/23 21:16:22 ###########


########## Tcl recorder starts at 05/01/23 00:31:00 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre7 -ini simcpls.ini -unit simcp.pre7
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 00:31:00 ###########


########## Tcl recorder starts at 05/01/23 00:33:11 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre7 -ini simcpls.ini -unit simcp.pre7
-cfg machgen.fdk lab8test.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 00:33:11 ###########


########## Tcl recorder starts at 05/01/23 00:37:13 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 00:37:13 ###########


########## Tcl recorder starts at 05/01/23 00:37:17 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 00:37:17 ###########


########## Tcl recorder starts at 05/01/23 00:39:02 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 00:39:02 ###########


########## Tcl recorder starts at 05/01/23 00:39:05 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 00:39:05 ###########


########## Tcl recorder starts at 05/01/23 08:09:27 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:09:27 ###########


########## Tcl recorder starts at 05/01/23 08:10:35 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:10:35 ###########


########## Tcl recorder starts at 05/01/23 08:11:10 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:11:10 ###########


########## Tcl recorder starts at 05/01/23 08:17:27 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:17:27 ###########


########## Tcl recorder starts at 05/01/23 08:17:29 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:17:29 ###########


########## Tcl recorder starts at 05/01/23 08:33:47 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/naf2sym\" DECODER_4"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:33:47 ###########


########## Tcl recorder starts at 05/01/23 08:34:53 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/naf2sym\" DECODER_4"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:34:53 ###########


########## Tcl recorder starts at 05/01/23 08:36:06 ##########

# Commands to make the Process: 
# Hierarchy Browser
# - none -
# Application to view the Process: 
# Hierarchy Browser
if [runCmd "\"$cpld_bin/hierbro\" new_lab8.jid  DECODER_4"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:36:06 ###########


########## Tcl recorder starts at 05/01/23 08:36:13 ##########

# Commands to make the Process: 
# Compiled Equations
if [runCmd "\"$cpld_bin/blif2eqn\" DECODER_4.bl0 -o DECODER_4.eq0  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:36:13 ###########


########## Tcl recorder starts at 05/01/23 08:36:55 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/naf2sym\" DECODER_4"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:36:55 ###########


########## Tcl recorder starts at 05/01/23 08:38:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:38:05 ###########


########## Tcl recorder starts at 05/01/23 08:38:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:38:06 ###########


########## Tcl recorder starts at 05/01/23 08:38:07 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj

########## Tcl recorder end at 05/01/23 08:38:07 ###########


########## Tcl recorder starts at 05/01/23 08:38:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:38:11 ###########


########## Tcl recorder starts at 05/01/23 08:38:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:38:11 ###########


########## Tcl recorder starts at 05/01/23 08:38:12 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:38:12 ###########


########## Tcl recorder starts at 05/01/23 08:38:16 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:38:16 ###########


########## Tcl recorder starts at 05/01/23 08:38:16 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:38:16 ###########


########## Tcl recorder starts at 05/01/23 08:38:16 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DECODER_4"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:38:16 ###########


########## Tcl recorder starts at 05/01/23 08:39:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:39:57 ###########


########## Tcl recorder starts at 05/01/23 08:41:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:41:34 ###########


########## Tcl recorder starts at 05/01/23 08:41:38 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:41:38 ###########


########## Tcl recorder starts at 05/01/23 08:41:38 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:41:38 ###########


########## Tcl recorder starts at 05/01/23 08:41:47 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:41:47 ###########


########## Tcl recorder starts at 05/01/23 08:43:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:43:59 ###########


########## Tcl recorder starts at 05/01/23 08:44:00 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:44:00 ###########


########## Tcl recorder starts at 05/01/23 08:44:00 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj

########## Tcl recorder end at 05/01/23 08:44:00 ###########


########## Tcl recorder starts at 05/01/23 08:44:04 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:44:04 ###########


########## Tcl recorder starts at 05/01/23 08:44:04 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:44:04 ###########


########## Tcl recorder starts at 05/01/23 08:44:05 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:44:05 ###########


########## Tcl recorder starts at 05/01/23 08:44:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:44:08 ###########


########## Tcl recorder starts at 05/01/23 08:44:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:44:08 ###########


########## Tcl recorder starts at 05/01/23 08:44:09 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DECODER_4"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:44:09 ###########


########## Tcl recorder starts at 05/01/23 08:45:26 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:26 ###########


########## Tcl recorder starts at 05/01/23 08:45:45 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:45 ###########


########## Tcl recorder starts at 05/01/23 08:45:45 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:45 ###########


########## Tcl recorder starts at 05/01/23 08:45:46 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:46 ###########


########## Tcl recorder starts at 05/01/23 08:46:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:09 ###########


########## Tcl recorder starts at 05/01/23 08:46:13 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:13 ###########


########## Tcl recorder starts at 05/01/23 08:46:13 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:13 ###########


########## Tcl recorder starts at 05/01/23 08:46:14 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj

########## Tcl recorder end at 05/01/23 08:46:14 ###########


########## Tcl recorder starts at 05/01/23 08:46:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:17 ###########


########## Tcl recorder starts at 05/01/23 08:46:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:17 ###########


########## Tcl recorder starts at 05/01/23 08:46:18 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:18 ###########


########## Tcl recorder starts at 05/01/23 08:46:21 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:21 ###########


########## Tcl recorder starts at 05/01/23 08:46:22 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:22 ###########


########## Tcl recorder starts at 05/01/23 08:46:22 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DECODER_4"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:46:22 ###########


########## Tcl recorder starts at 05/01/23 08:47:49 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:47:49 ###########


########## Tcl recorder starts at 05/01/23 08:47:54 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:47:54 ###########


########## Tcl recorder starts at 05/01/23 08:47:54 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:47:54 ###########


########## Tcl recorder starts at 05/01/23 08:47:57 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:47:57 ###########


########## Tcl recorder starts at 05/01/23 08:48:37 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:48:37 ###########


########## Tcl recorder starts at 05/01/23 09:05:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:24 ###########


########## Tcl recorder starts at 05/01/23 09:05:24 ##########

# Commands to make the Process: 
# Compiled Equations
if [runCmd "\"$cpld_bin/blif2eqn\" DECODE_MODULE.bl0 -o DECODE_MODULE.eq0  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:24 ###########


########## Tcl recorder starts at 05/01/23 09:05:27 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:27 ###########


########## Tcl recorder starts at 05/01/23 09:05:27 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DECODE_MODULE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:27 ###########


########## Tcl recorder starts at 05/01/23 09:05:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:35 ###########


########## Tcl recorder starts at 05/01/23 09:05:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:35 ###########


########## Tcl recorder starts at 05/01/23 09:05:36 ##########

# Commands to make the Process: 
# Verilog Test Fixture Declarations
if [runCmd "\"$cpld_bin/vlog2jhd\" -tfi -proj new_lab8 -mod DECODE_MODULE -out DECODE_MODULE -predefine new_lab8.h -tpl \"$install_dir/ispcpld/generic/verilog/tfi.tft\" decode_module.v"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:36 ###########


########## Tcl recorder starts at 05/01/23 09:05:39 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:39 ###########


########## Tcl recorder starts at 05/01/23 09:05:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:40 ###########


########## Tcl recorder starts at 05/01/23 09:05:40 ##########

# Commands to make the Process: 
# Verilog Test Fixture Template
if [runCmd "\"$cpld_bin/vlog2jhd\" -tfi -proj new_lab8 -ext .tft -mod DECODE_MODULE -out DECODE_MODULE -predefine new_lab8.h -tpl \"$install_dir/ispcpld/generic/verilog/tft.tft\" decode_module.v"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:40 ###########


########## Tcl recorder starts at 05/01/23 09:05:43 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:43 ###########


########## Tcl recorder starts at 05/01/23 09:05:44 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:44 ###########


########## Tcl recorder starts at 05/01/23 09:05:44 ##########

# Commands to make the Process: 
# Generate Synthesize Tool Tcl Script
# - none -
# Application to view the Process: 
# Generate Synthesize Tool Tcl Script
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/synedit\" -i \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:44 ###########


########## Tcl recorder starts at 05/01/23 09:10:32 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:10:32 ###########


########## Tcl recorder starts at 05/01/23 09:10:35 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt decode_module_test.wdl -network=DECODE_MODULE -module=DECODE_MODULE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"DECODE_MODULE.blo\" -o \"DECODE_MODULE.blh\" -omod \"DECODE_MODULE\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.blh -o DECODE_MODULE.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i DECODE_MODULE.bli -o DECODE_MODULE.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk decode_module_test.ltv -map DECODE_MODULE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:10:35 ###########


########## Tcl recorder starts at 05/01/23 09:50:18 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:50:18 ###########


########## Tcl recorder starts at 05/01/23 09:51:31 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt decode_module_test.wdl -network=DECODE_MODULE -module=DECODE_MODULE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"DECODE_MODULE.blo\" -o \"DECODE_MODULE.blh\" -omod \"DECODE_MODULE\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.blh -o DECODE_MODULE.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i DECODE_MODULE.bli -o DECODE_MODULE.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk decode_module_test.ltv -map DECODE_MODULE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:51:31 ###########


########## Tcl recorder starts at 05/01/23 09:52:20 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:52:20 ###########


########## Tcl recorder starts at 05/01/23 10:01:53 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:01:53 ###########


########## Tcl recorder starts at 05/01/23 10:02:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:09 ###########


########## Tcl recorder starts at 05/01/23 10:02:56 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:56 ###########


########## Tcl recorder starts at 05/01/23 10:02:56 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:56 ###########


########## Tcl recorder starts at 05/01/23 10:02:57 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/01/23 10:02:57 ###########


########## Tcl recorder starts at 05/01/23 10:03:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:03 ###########


########## Tcl recorder starts at 05/01/23 10:03:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:03 ###########


########## Tcl recorder starts at 05/01/23 10:03:04 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:04 ###########


########## Tcl recorder starts at 05/01/23 10:03:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:08 ###########


########## Tcl recorder starts at 05/01/23 10:03:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:09 ###########


########## Tcl recorder starts at 05/01/23 10:03:10 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" CALCULATE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:10 ###########


########## Tcl recorder starts at 05/01/23 10:03:26 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:26 ###########


########## Tcl recorder starts at 05/01/23 10:03:26 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:26 ###########


########## Tcl recorder starts at 05/01/23 10:03:31 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:31 ###########


########## Tcl recorder starts at 05/01/23 10:03:32 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:32 ###########


########## Tcl recorder starts at 05/01/23 10:03:33 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:03:33 ###########


########## Tcl recorder starts at 05/01/23 10:04:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:04:06 ###########


########## Tcl recorder starts at 05/01/23 10:04:07 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:04:07 ###########


########## Tcl recorder starts at 05/01/23 10:04:08 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:04:08 ###########


########## Tcl recorder starts at 05/01/23 10:06:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:06:59 ###########


########## Tcl recorder starts at 05/01/23 10:07:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:07:02 ###########


########## Tcl recorder starts at 05/01/23 10:07:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:07:02 ###########


########## Tcl recorder starts at 05/01/23 10:07:03 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:07:03 ###########


########## Tcl recorder starts at 05/01/23 10:07:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:07:08 ###########


########## Tcl recorder starts at 05/01/23 10:07:08 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:07:08 ###########


########## Tcl recorder starts at 05/01/23 10:07:12 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:07:12 ###########


########## Tcl recorder starts at 05/01/23 10:07:12 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:07:12 ###########


########## Tcl recorder starts at 05/01/23 10:07:14 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:07:14 ###########


########## Tcl recorder starts at 05/01/23 10:27:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:27:41 ###########


########## Tcl recorder starts at 05/01/23 10:33:55 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:33:55 ###########


########## Tcl recorder starts at 05/01/23 10:44:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:44:57 ###########


########## Tcl recorder starts at 05/01/23 10:45:36 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:45:36 ###########


########## Tcl recorder starts at 05/01/23 10:45:42 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:45:42 ###########


########## Tcl recorder starts at 05/01/23 10:45:43 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:45:43 ###########


########## Tcl recorder starts at 05/01/23 10:45:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:45:50 ###########


########## Tcl recorder starts at 05/01/23 10:45:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:45:50 ###########


########## Tcl recorder starts at 05/01/23 10:45:52 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:45:52 ###########


########## Tcl recorder starts at 05/01/23 11:03:38 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:03:38 ###########


########## Tcl recorder starts at 05/01/23 11:04:58 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:04:58 ###########


########## Tcl recorder starts at 05/01/23 11:05:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:05:03 ###########


########## Tcl recorder starts at 05/01/23 11:05:04 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:05:04 ###########


########## Tcl recorder starts at 05/01/23 11:05:06 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:05:06 ###########


########## Tcl recorder starts at 05/01/23 11:06:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:06:02 ###########


########## Tcl recorder starts at 05/01/23 11:06:02 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:06:02 ###########


########## Tcl recorder starts at 05/01/23 11:06:30 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:06:30 ###########


########## Tcl recorder starts at 05/01/23 11:09:48 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:09:48 ###########


########## Tcl recorder starts at 05/01/23 11:09:51 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:09:51 ###########


########## Tcl recorder starts at 05/01/23 11:09:52 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:09:52 ###########


########## Tcl recorder starts at 05/01/23 11:09:55 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:09:55 ###########


########## Tcl recorder starts at 05/01/23 11:09:55 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:09:55 ###########


########## Tcl recorder starts at 05/01/23 11:09:57 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:09:57 ###########


########## Tcl recorder starts at 05/01/23 11:12:27 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:12:27 ###########


########## Tcl recorder starts at 05/01/23 11:12:48 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:12:48 ###########


########## Tcl recorder starts at 05/01/23 11:12:48 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:12:48 ###########


########## Tcl recorder starts at 05/01/23 11:12:51 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:12:51 ###########


########## Tcl recorder starts at 05/01/23 11:12:52 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:12:52 ###########


########## Tcl recorder starts at 05/01/23 11:12:54 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:12:54 ###########


########## Tcl recorder starts at 05/01/23 11:15:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:15:35 ###########


########## Tcl recorder starts at 05/01/23 11:15:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:15:40 ###########


########## Tcl recorder starts at 05/01/23 11:15:41 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:15:41 ###########


########## Tcl recorder starts at 05/01/23 11:15:43 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:15:43 ###########


########## Tcl recorder starts at 05/01/23 11:15:44 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:15:44 ###########


########## Tcl recorder starts at 05/01/23 11:15:45 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:15:45 ###########


########## Tcl recorder starts at 05/01/23 11:26:37 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:26:37 ###########


########## Tcl recorder starts at 05/01/23 11:34:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:34:57 ###########


########## Tcl recorder starts at 05/01/23 11:35:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:35:30 ###########


########## Tcl recorder starts at 05/01/23 11:35:36 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:35:36 ###########


########## Tcl recorder starts at 05/01/23 11:35:48 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:35:48 ###########


########## Tcl recorder starts at 05/01/23 11:35:56 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:35:56 ###########


########## Tcl recorder starts at 05/01/23 11:36:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:06 ###########


########## Tcl recorder starts at 05/01/23 11:36:07 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:07 ###########


########## Tcl recorder starts at 05/01/23 11:36:07 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/01/23 11:36:07 ###########


########## Tcl recorder starts at 05/01/23 11:36:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:30 ###########


########## Tcl recorder starts at 05/01/23 11:36:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:34 ###########


########## Tcl recorder starts at 05/01/23 11:36:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:34 ###########


########## Tcl recorder starts at 05/01/23 11:36:35 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/01/23 11:36:35 ###########


########## Tcl recorder starts at 05/01/23 11:36:45 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:36:45 ###########


########## Tcl recorder starts at 05/01/23 11:38:14 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:38:14 ###########


########## Tcl recorder starts at 05/01/23 11:38:20 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:38:20 ###########


########## Tcl recorder starts at 05/01/23 11:38:20 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 11:38:20 ###########


########## Tcl recorder starts at 05/01/23 11:38:21 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/01/23 11:38:21 ###########


########## Tcl recorder starts at 05/01/23 15:54:10 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:54:10 ###########


########## Tcl recorder starts at 05/01/23 15:54:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:54:11 ###########


########## Tcl recorder starts at 05/01/23 15:54:12 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/01/23 15:54:12 ###########


########## Tcl recorder starts at 05/01/23 15:57:23 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:57:23 ###########


########## Tcl recorder starts at 05/01/23 15:57:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:57:24 ###########


########## Tcl recorder starts at 05/01/23 15:57:25 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/01/23 15:57:25 ###########


########## Tcl recorder starts at 05/01/23 15:57:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:57:29 ###########


########## Tcl recorder starts at 05/01/23 15:57:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:57:30 ###########


########## Tcl recorder starts at 05/01/23 15:57:31 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:57:31 ###########


########## Tcl recorder starts at 05/01/23 15:57:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:57:35 ###########


########## Tcl recorder starts at 05/01/23 15:57:36 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:57:36 ###########


########## Tcl recorder starts at 05/01/23 15:57:37 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DESHAKE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 15:57:37 ###########


########## Tcl recorder starts at 05/01/23 16:01:00 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:01:00 ###########


########## Tcl recorder starts at 05/01/23 16:01:49 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:01:49 ###########


########## Tcl recorder starts at 05/01/23 16:02:21 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:02:21 ###########


########## Tcl recorder starts at 05/01/23 16:02:36 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:02:36 ###########


########## Tcl recorder starts at 05/01/23 16:02:37 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:02:37 ###########


########## Tcl recorder starts at 05/01/23 16:03:55 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:03:55 ###########


########## Tcl recorder starts at 05/01/23 16:03:56 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:03:56 ###########


########## Tcl recorder starts at 05/01/23 16:03:59 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:03:59 ###########


########## Tcl recorder starts at 05/01/23 16:06:58 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:06:58 ###########


########## Tcl recorder starts at 05/01/23 16:06:59 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:06:59 ###########


########## Tcl recorder starts at 05/01/23 16:07:31 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:07:31 ###########


########## Tcl recorder starts at 05/01/23 16:07:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:07:40 ###########


########## Tcl recorder starts at 05/01/23 16:07:41 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:07:41 ###########


########## Tcl recorder starts at 05/01/23 16:07:45 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:07:45 ###########


########## Tcl recorder starts at 05/01/23 16:07:46 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:07:46 ###########


########## Tcl recorder starts at 05/01/23 16:07:49 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:07:49 ###########


########## Tcl recorder starts at 05/01/23 16:56:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:56:08 ###########


########## Tcl recorder starts at 05/01/23 16:56:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:56:09 ###########


########## Tcl recorder starts at 05/01/23 16:56:11 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:56:11 ###########


########## Tcl recorder starts at 05/01/23 16:56:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:56:40 ###########


########## Tcl recorder starts at 05/01/23 16:56:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:56:41 ###########


########## Tcl recorder starts at 05/01/23 16:56:42 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/01/23 16:56:42 ###########


########## Tcl recorder starts at 05/01/23 16:57:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:57:19 ###########


########## Tcl recorder starts at 05/01/23 16:57:20 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:57:20 ###########


########## Tcl recorder starts at 05/01/23 16:57:21 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DESHAKE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:57:21 ###########


########## Tcl recorder starts at 05/01/23 16:57:47 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:57:47 ###########


########## Tcl recorder starts at 05/01/23 16:57:52 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:57:52 ###########


########## Tcl recorder starts at 05/01/23 16:57:53 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 16:57:53 ###########


########## Tcl recorder starts at 05/01/23 17:18:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:18:30 ###########


########## Tcl recorder starts at 05/01/23 17:18:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:18:35 ###########


########## Tcl recorder starts at 05/01/23 17:18:36 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:18:36 ###########


########## Tcl recorder starts at 05/01/23 17:38:37 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:38:37 ###########


########## Tcl recorder starts at 05/01/23 17:38:43 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:38:43 ###########


########## Tcl recorder starts at 05/01/23 17:38:44 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:38:44 ###########


########## Tcl recorder starts at 05/01/23 17:38:55 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:38:55 ###########


########## Tcl recorder starts at 05/01/23 17:38:56 ##########

# Commands to make the Process: 
# Navigate Hierarchy
# - none -
# Application to view the Process: 
# Navigate Hierarchy
if [runCmd "\"$cpld_bin/hiernav\" lab8.sch"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:38:56 ###########


########## Tcl recorder starts at 05/01/23 17:39:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:39:03 ###########


########## Tcl recorder starts at 05/01/23 17:39:04 ##########

# Commands to make the Process: 
# Navigate Hierarchy
# - none -
# Application to view the Process: 
# Navigate Hierarchy
if [runCmd "\"$cpld_bin/hiernav\" lab8.sch"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:39:04 ###########


########## Tcl recorder starts at 05/01/23 17:39:14 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:39:14 ###########


########## Tcl recorder starts at 05/01/23 17:39:15 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:39:15 ###########


########## Tcl recorder starts at 05/01/23 17:39:15 ##########

# Commands to make the Process: 
# Hierarchy Browser
# - none -
# Application to view the Process: 
# Hierarchy Browser
if [runCmd "\"$cpld_bin/hierbro\" new_lab8.jid  DESHAKE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 17:39:15 ###########


########## Tcl recorder starts at 05/01/23 18:09:46 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:09:46 ###########


########## Tcl recorder starts at 05/01/23 18:09:47 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:09:47 ###########


########## Tcl recorder starts at 05/01/23 18:09:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:09:50 ###########


########## Tcl recorder starts at 05/01/23 18:09:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:09:50 ###########


########## Tcl recorder starts at 05/01/23 18:09:51 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/01/23 18:09:51 ###########


########## Tcl recorder starts at 05/01/23 18:09:56 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:09:56 ###########


########## Tcl recorder starts at 05/01/23 18:09:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:09:57 ###########


########## Tcl recorder starts at 05/01/23 18:09:58 ##########

# Commands to make the Process: 
# Hierarchy Browser
# - none -
# Application to view the Process: 
# Hierarchy Browser
if [runCmd "\"$cpld_bin/hierbro\" new_lab8.jid  CALCULATE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:09:58 ###########


########## Tcl recorder starts at 05/01/23 18:10:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:10:09 ###########


########## Tcl recorder starts at 05/01/23 18:10:10 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:10:10 ###########


########## Tcl recorder starts at 05/01/23 18:10:11 ##########

# Commands to make the Process: 
# Hierarchy Browser
# - none -
# Application to view the Process: 
# Hierarchy Browser
if [runCmd "\"$cpld_bin/hierbro\" new_lab8.jid  DESHAKE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:10:11 ###########


########## Tcl recorder starts at 05/01/23 18:10:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:10:29 ###########


########## Tcl recorder starts at 05/01/23 18:10:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:10:30 ###########


########## Tcl recorder starts at 05/01/23 18:10:30 ##########

# Commands to make the Process: 
# Generate Synthesize Tool Tcl Script
# - none -
# Application to view the Process: 
# Generate Synthesize Tool Tcl Script
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/synedit\" -i \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:10:30 ###########


########## Tcl recorder starts at 05/01/23 18:12:13 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:12:13 ###########


########## Tcl recorder starts at 05/01/23 18:12:18 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:12:18 ###########


########## Tcl recorder starts at 05/01/23 18:12:19 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup calculator.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"calculator.bls\" -o \"calculator.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:12:19 ###########


########## Tcl recorder starts at 05/01/23 18:13:14 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:13:14 ###########


########## Tcl recorder starts at 05/01/23 18:13:18 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:13:18 ###########


########## Tcl recorder starts at 05/01/23 18:13:19 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:13:19 ###########


########## Tcl recorder starts at 05/01/23 18:14:01 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:14:01 ###########


########## Tcl recorder starts at 05/01/23 18:58:44 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:58:44 ###########


########## Tcl recorder starts at 05/01/23 18:58:52 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:58:52 ###########


########## Tcl recorder starts at 05/01/23 18:58:53 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:58:53 ###########


########## Tcl recorder starts at 05/01/23 18:58:56 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open COLLECTOR_lse.env w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open COLLECTOR.synproj w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top COLLECTOR
-lib \"work\" -ver new_lab8.h collector.v
-output_edif COLLECTOR.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"COLLECTOR.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete COLLECTOR_lse.env
file delete COLLECTOR.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf COLLECTOR.edi -out COLLECTOR.bl0 -err automake.err -log COLLECTOR.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" COLLECTOR.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open D_TRIGGER_lse.env w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open D_TRIGGER.synproj w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top D_TRIGGER
-lib \"work\" -ver new_lab8.h d_trigger.v
-output_edif D_TRIGGER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"D_TRIGGER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete D_TRIGGER_lse.env
file delete D_TRIGGER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf D_TRIGGER.edi -out D_TRIGGER.bl0 -err automake.err -log D_TRIGGER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" D_TRIGGER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 18:58:56 ###########


########## Tcl recorder starts at 05/01/23 19:00:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:00:03 ###########


########## Tcl recorder starts at 05/01/23 19:00:56 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:00:56 ###########


########## Tcl recorder starts at 05/01/23 19:01:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:01:09 ###########


########## Tcl recorder starts at 05/01/23 19:01:10 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:01:10 ###########


########## Tcl recorder starts at 05/01/23 19:04:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:04:19 ###########


########## Tcl recorder starts at 05/01/23 19:04:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:04:25 ###########


########## Tcl recorder starts at 05/01/23 19:04:48 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:04:48 ###########


########## Tcl recorder starts at 05/01/23 19:07:45 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:07:45 ###########


########## Tcl recorder starts at 05/01/23 19:11:44 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:11:44 ###########


########## Tcl recorder starts at 05/01/23 19:11:50 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open COLLECTOR_lse.env w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open COLLECTOR.synproj w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top COLLECTOR
-lib \"work\" -ver new_lab8.h collector.v
-output_edif COLLECTOR.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"COLLECTOR.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete COLLECTOR_lse.env
file delete COLLECTOR.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf COLLECTOR.edi -out COLLECTOR.bl0 -err automake.err -log COLLECTOR.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" COLLECTOR.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open D_TRIGGER_lse.env w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open D_TRIGGER.synproj w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top D_TRIGGER
-lib \"work\" -ver new_lab8.h d_trigger.v
-output_edif D_TRIGGER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"D_TRIGGER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete D_TRIGGER_lse.env
file delete D_TRIGGER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf D_TRIGGER.edi -out D_TRIGGER.bl0 -err automake.err -log D_TRIGGER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" D_TRIGGER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 19:11:50 ###########


########## Tcl recorder starts at 05/18/23 21:19:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:19:06 ###########


########## Tcl recorder starts at 05/18/23 21:19:33 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:19:33 ###########


########## Tcl recorder starts at 05/18/23 21:27:37 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:27:37 ###########


########## Tcl recorder starts at 05/18/23 21:27:44 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open LED_DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open LED_DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top LED_DECODER
-lib \"work\" -ver new_lab8.h led_decoder.v
-output_edif LED_DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"LED_DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete LED_DECODER_lse.env
file delete LED_DECODER.synproj

########## Tcl recorder end at 05/18/23 21:27:44 ###########


########## Tcl recorder starts at 05/18/23 21:28:27 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:28:27 ###########


########## Tcl recorder starts at 05/18/23 21:28:30 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open LED_DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open LED_DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top LED_DECODER
-lib \"work\" -ver new_lab8.h led_decoder.v
-output_edif LED_DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"LED_DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete LED_DECODER_lse.env
file delete LED_DECODER.synproj

########## Tcl recorder end at 05/18/23 21:28:30 ###########


########## Tcl recorder starts at 05/18/23 21:28:34 ##########

# Commands to make the Process: 
# Compile EDIF File
if [runCmd "\"$cpld_bin/edif2blf\" -edf LED_DECODER.edi -out LED_DECODER.bl0 -err automake.err -log LED_DECODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:28:34 ###########


########## Tcl recorder starts at 05/18/23 21:28:44 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:28:44 ###########


########## Tcl recorder starts at 05/18/23 21:28:48 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" LED_DECODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:28:48 ###########


########## Tcl recorder starts at 05/18/23 21:33:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:33:17 ###########


########## Tcl recorder starts at 05/18/23 21:33:21 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open LED_DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open LED_DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top LED_DECODER
-lib \"work\" -ver new_lab8.h led_decoder.v
-output_edif LED_DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"LED_DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete LED_DECODER_lse.env
file delete LED_DECODER.synproj

########## Tcl recorder end at 05/18/23 21:33:21 ###########


########## Tcl recorder starts at 05/18/23 21:33:24 ##########

# Commands to make the Process: 
# Compile EDIF File
if [runCmd "\"$cpld_bin/edif2blf\" -edf LED_DECODER.edi -out LED_DECODER.bl0 -err automake.err -log LED_DECODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:33:24 ###########


########## Tcl recorder starts at 05/18/23 21:33:35 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" LED_DECODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:33:35 ###########


########## Tcl recorder starts at 05/18/23 21:33:54 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open LED_DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open LED_DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top LED_DECODER
-lib \"work\" -ver new_lab8.h led_decoder.v
-output_edif LED_DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"LED_DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete LED_DECODER_lse.env
file delete LED_DECODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf LED_DECODER.edi -out LED_DECODER.bl0 -err automake.err -log LED_DECODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" LED_DECODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open COLLECTOR_lse.env w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open COLLECTOR.synproj w} rspFile] {
	puts stderr "Cannot create response file COLLECTOR.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top COLLECTOR
-lib \"work\" -ver new_lab8.h collector.v
-output_edif COLLECTOR.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"COLLECTOR.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete COLLECTOR_lse.env
file delete COLLECTOR.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf COLLECTOR.edi -out COLLECTOR.bl0 -err automake.err -log COLLECTOR.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" COLLECTOR.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open D_TRIGGER_lse.env w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open D_TRIGGER.synproj w} rspFile] {
	puts stderr "Cannot create response file D_TRIGGER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top D_TRIGGER
-lib \"work\" -ver new_lab8.h d_trigger.v
-output_edif D_TRIGGER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"D_TRIGGER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete D_TRIGGER_lse.env
file delete D_TRIGGER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf D_TRIGGER.edi -out D_TRIGGER.bl0 -err automake.err -log D_TRIGGER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" D_TRIGGER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:33:54 ###########


########## Tcl recorder starts at 05/18/23 21:37:25 ##########

# Commands to make the Process: 
# Verilog Test Fixture Template
if [runCmd "\"$cpld_bin/vlog2jhd\" -tfi -proj new_lab8 -ext .tft -mod LED_DECODER -out LED_DECODER -predefine new_lab8.h -tpl \"$install_dir/ispcpld/generic/verilog/tft.tft\" led_decoder.v"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:37:25 ###########


########## Tcl recorder starts at 05/18/23 21:39:01 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=lab8 -module=lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.blo  -keepwires -family -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" LED_DECODER.bl0 -o LED_DECODER.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" COLLECTOR.bl0 -o COLLECTOR.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -o DIVIDER_8.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" D_TRIGGER.bl0 -o D_TRIGGER.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -o DECODER_5.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -o ENCODER.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -o DECODE_MODULE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"lab8.blo\" -o \"lab8.blh\" -omod \"lab8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" lab8.blh -o lab8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i lab8.bli -o lab8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2tf\" -template \"$install_dir/ispcpld/plsi/latsim/plsi.tft\" -prj new_lab8 -ext .lsi lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map lab8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:39:01 ###########


########## Tcl recorder starts at 05/18/23 21:40:16 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:40:16 ###########


########## Tcl recorder starts at 05/18/23 21:40:20 ##########

# Commands to make the Process: 
# Compile EDIF File
if [catch {open LED_DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open LED_DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top LED_DECODER
-lib \"work\" -ver new_lab8.h led_decoder.v
-output_edif LED_DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"LED_DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete LED_DECODER_lse.env
file delete LED_DECODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf LED_DECODER.edi -out LED_DECODER.bl0 -err automake.err -log LED_DECODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:40:20 ###########


########## Tcl recorder starts at 05/18/23 21:40:27 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" LED_DECODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:40:27 ###########


########## Tcl recorder starts at 05/18/23 21:43:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:43:24 ###########


########## Tcl recorder starts at 05/18/23 21:43:31 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open LED_DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open LED_DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top LED_DECODER
-lib \"work\" -ver new_lab8.h led_decoder.v
-output_edif LED_DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"LED_DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete LED_DECODER_lse.env
file delete LED_DECODER.synproj

########## Tcl recorder end at 05/18/23 21:43:31 ###########


########## Tcl recorder starts at 05/18/23 21:43:44 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:43:44 ###########


########## Tcl recorder starts at 05/18/23 21:44:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:44:41 ###########


########## Tcl recorder starts at 05/18/23 21:44:44 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open LED_DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open LED_DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top LED_DECODER
-lib \"work\" -ver new_lab8.h led_decoder.v
-output_edif LED_DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"LED_DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete LED_DECODER_lse.env
file delete LED_DECODER.synproj

########## Tcl recorder end at 05/18/23 21:44:44 ###########


########## Tcl recorder starts at 05/18/23 21:45:07 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:45:07 ###########


########## Tcl recorder starts at 05/18/23 21:45:11 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open LED_DECODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open LED_DECODER.synproj w} rspFile] {
	puts stderr "Cannot create response file LED_DECODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top LED_DECODER
-lib \"work\" -ver new_lab8.h led_decoder.v
-output_edif LED_DECODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"LED_DECODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete LED_DECODER_lse.env
file delete LED_DECODER.synproj

########## Tcl recorder end at 05/18/23 21:45:11 ###########


########## Tcl recorder starts at 05/18/23 21:45:36 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:45:36 ###########


########## Tcl recorder starts at 05/18/23 21:59:43 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 21:59:43 ###########


########## Tcl recorder starts at 05/18/23 22:00:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:00:02 ###########


########## Tcl recorder starts at 05/18/23 22:00:20 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" display.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:00:20 ###########


########## Tcl recorder starts at 05/18/23 22:00:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" display.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:00:25 ###########


########## Tcl recorder starts at 05/18/23 22:00:34 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj

########## Tcl recorder end at 05/18/23 22:00:34 ###########


########## Tcl recorder starts at 05/01/23 22:02:53 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj

########## Tcl recorder end at 05/01/23 22:02:53 ###########


########## Tcl recorder starts at 05/01/23 22:03:33 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj

########## Tcl recorder end at 05/01/23 22:03:33 ###########


########## Tcl recorder starts at 05/01/23 22:03:37 ##########

# Commands to make the Process: 
# Compile EDIF File
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:03:37 ###########


########## Tcl recorder starts at 05/01/23 22:03:41 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/naf2sym\" DISPLAY"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:03:41 ###########


########## Tcl recorder starts at 05/01/23 22:09:19 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:09:19 ###########


########## Tcl recorder starts at 05/01/23 22:09:24 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8.bl0 -o lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/blifstat\" -i new_lab8.bl5 -o new_lab8.sif"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:09:24 ###########


########## Tcl recorder starts at 05/01/23 22:18:37 ##########

# Commands to make the Process: 
# Compile EDIF File
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:18:37 ###########


########## Tcl recorder starts at 05/01/23 22:18:44 ##########

# Commands to make the Process: 
# Generate Synthesize Tool Tcl Script
# - none -
# Application to view the Process: 
# Generate Synthesize Tool Tcl Script
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/synedit\" -i \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:18:44 ###########


########## Tcl recorder starts at 05/01/23 22:23:11 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:23:11 ###########


########## Tcl recorder starts at 05/01/23 22:23:17 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" display.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DISPLAY"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:23:17 ###########


########## Tcl recorder starts at 05/01/23 22:29:27 ##########

# Commands to make the Process: 
# Compile EDIF File
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:29:27 ###########


########## Tcl recorder starts at 05/01/23 22:29:32 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:29:32 ###########


########## Tcl recorder starts at 05/01/23 22:34:09 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8.bls\" -o \"lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:34:09 ###########


########## Tcl recorder starts at 05/18/23 22:42:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" display.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:42:17 ###########


########## Tcl recorder starts at 05/18/23 22:42:17 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/naf2sym\" DISPLAY"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:42:17 ###########


########## Tcl recorder starts at 05/18/23 22:43:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new_lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:43:50 ###########


########## Tcl recorder starts at 05/18/23 22:43:59 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new_lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new_lab8.bls\" -o \"new_lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:43:59 ###########


########## Tcl recorder starts at 05/18/23 22:44:10 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/mblifopt\" -i new_lab8.bl0 -o new_lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new_lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new_lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/blifstat\" -i new_lab8.bl5 -o new_lab8.sif"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:44:10 ###########


########## Tcl recorder starts at 05/18/23 22:44:39 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new_lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/18/23 22:44:39 ###########


########## Tcl recorder starts at 05/01/23 22:44:51 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new_lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:44:51 ###########


########## Tcl recorder starts at 05/01/23 22:47:52 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new_lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:47:52 ###########


########## Tcl recorder starts at 05/01/23 22:51:25 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new_lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:51:25 ###########


########## Tcl recorder starts at 05/01/23 22:53:23 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new_lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new_lab8.bls\" -o \"new_lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:53:23 ###########


########## Tcl recorder starts at 05/01/23 22:53:35 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new_lab8.bl0 -o new_lab8.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new_lab8.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new_lab8 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new_lab8 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:53:35 ###########


########## Tcl recorder starts at 05/01/23 22:59:50 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new_lab8.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new_lab8.bls\" -o \"new_lab8.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 22:59:50 ###########


########## Tcl recorder starts at 05/01/23 23:00:48 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 23:00:48 ###########


########## Tcl recorder starts at 05/01/23 23:01:10 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 23:01:10 ###########


########## Tcl recorder starts at 05/01/23 23:01:15 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 23:01:15 ###########


########## Tcl recorder starts at 05/01/23 23:33:03 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt lab8.wdl -network=new_lab8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre7 -ini simcpls.ini -unit simcp.pre7
-cfg machgen.fdk lab8.ltv -map new.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 23:33:03 ###########


########## Tcl recorder starts at 05/02/23 00:20:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:20:40 ###########


########## Tcl recorder starts at 05/02/23 00:24:33 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.blo  -keepwires -family -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -o DESHAKE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -o DISPLAY.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -o DIVIDER_8.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -o DECODER_5.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -o DECODER_4.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -o ENCODER.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -o DECODE_MODULE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"new.blo\" -o \"new.blh\" -omod \"new\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new.blh -o new.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i new.bli -o new.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2tf\" -template \"$install_dir/ispcpld/plsi/latsim/plsi.tft\" -prj new_lab8 -ext .lsi new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk lab8.ltv -map new.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:24:33 ###########


########## Tcl recorder starts at 05/02/23 00:47:52 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:47:52 ###########


########## Tcl recorder starts at 05/02/23 00:51:43 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:51:43 ###########


########## Tcl recorder starts at 05/02/23 00:53:13 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:53:13 ###########


########## Tcl recorder starts at 05/02/23 00:54:36 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:54:36 ###########


########## Tcl recorder starts at 05/02/23 00:56:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:56:59 ###########


########## Tcl recorder starts at 05/02/23 00:57:02 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:57:02 ###########


########## Tcl recorder starts at 05/02/23 00:57:06 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:57:06 ###########


########## Tcl recorder starts at 05/02/23 00:59:37 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 00:59:37 ###########


########## Tcl recorder starts at 05/02/23 01:11:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:11:40 ###########


########## Tcl recorder starts at 05/02/23 01:11:47 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:11:47 ###########


########## Tcl recorder starts at 05/02/23 01:11:51 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:11:51 ###########


########## Tcl recorder starts at 05/02/23 01:16:00 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:16:00 ###########


########## Tcl recorder starts at 05/02/23 01:16:03 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:16:03 ###########


########## Tcl recorder starts at 05/02/23 01:16:08 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:16:08 ###########


########## Tcl recorder starts at 05/02/23 01:17:28 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:17:28 ###########


########## Tcl recorder starts at 05/02/23 01:17:32 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:17:32 ###########


########## Tcl recorder starts at 05/02/23 01:17:59 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:17:59 ###########


########## Tcl recorder starts at 05/02/23 01:18:36 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:18:36 ###########


########## Tcl recorder starts at 05/02/23 01:24:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:24:35 ###########


########## Tcl recorder starts at 05/02/23 01:28:18 ##########

# Commands to make the Process: 
# Constraint Editor
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:28:18 ###########


########## Tcl recorder starts at 05/02/23 01:29:03 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:29:03 ###########


########## Tcl recorder starts at 05/02/23 01:30:05 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:30:05 ###########


########## Tcl recorder starts at 05/02/23 01:34:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:34:57 ###########


########## Tcl recorder starts at 05/02/23 01:35:01 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:35:01 ###########


########## Tcl recorder starts at 05/02/23 01:35:04 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:35:04 ###########


########## Tcl recorder starts at 05/02/23 01:36:44 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:36:44 ###########


########## Tcl recorder starts at 05/02/23 01:36:47 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:36:47 ###########


########## Tcl recorder starts at 05/02/23 01:36:51 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:36:51 ###########


########## Tcl recorder starts at 05/02/23 01:46:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:46:30 ###########


########## Tcl recorder starts at 05/02/23 01:46:35 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/02/23 01:46:35 ###########


########## Tcl recorder starts at 05/02/23 01:46:50 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:46:50 ###########


########## Tcl recorder starts at 05/02/23 01:48:39 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:48:39 ###########


########## Tcl recorder starts at 05/02/23 01:48:48 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj

########## Tcl recorder end at 05/02/23 01:48:48 ###########


########## Tcl recorder starts at 05/02/23 01:53:47 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt deshake.wdl -network=DESHAKE -module=DESHAKE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -o DESHAKE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"DESHAKE.blo\" -o \"DESHAKE.blh\" -omod \"DESHAKE\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.blh -o DESHAKE.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i DESHAKE.bli -o DESHAKE.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk deshake.ltv -map DESHAKE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:53:47 ###########


########## Tcl recorder starts at 05/02/23 01:54:24 ##########

# Commands to make the Process: 
# Functional Simulation
# - none -
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk deshake.ltv -map DESHAKE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:54:24 ###########


########## Tcl recorder starts at 05/02/23 01:54:32 ##########

# Commands to make the Process: 
# Functional Simulation
# - none -
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk deshake.ltv -map DESHAKE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:54:32 ###########


########## Tcl recorder starts at 05/02/23 01:56:41 ##########

# Commands to make the Process: 
# Functional Simulation
# - none -
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk deshake.ltv -map DESHAKE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:56:41 ###########


########## Tcl recorder starts at 05/02/23 01:57:28 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt deshake.wdl -network=DESHAKE -module=DESHAKE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"DESHAKE.blo\" -o \"DESHAKE.blh\" -omod \"DESHAKE\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.blh -o DESHAKE.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i DESHAKE.bli -o DESHAKE.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk deshake.ltv -map DESHAKE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:57:28 ###########


########## Tcl recorder starts at 05/02/23 01:59:21 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:59:21 ###########


########## Tcl recorder starts at 05/02/23 01:59:25 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:59:25 ###########


########## Tcl recorder starts at 05/02/23 01:59:30 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 01:59:30 ###########


########## Tcl recorder starts at 05/02/23 02:01:50 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:01:50 ###########


########## Tcl recorder starts at 05/02/23 02:02:28 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" DIVIDER_8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:02:28 ###########


########## Tcl recorder starts at 05/02/23 02:02:32 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:02:32 ###########


########## Tcl recorder starts at 05/02/23 02:02:32 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:02:32 ###########


########## Tcl recorder starts at 05/02/23 02:02:33 ##########

# Commands to make the Process: 
# Generate Synthesize Tool Tcl Script
# - none -
# Application to view the Process: 
# Generate Synthesize Tool Tcl Script
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/synedit\" -i \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:02:33 ###########


########## Tcl recorder starts at 05/02/23 02:03:21 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:03:21 ###########


########## Tcl recorder starts at 05/02/23 02:03:24 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt divider_8.wdl -network=DIVIDER_8 -module=DIVIDER_8"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -o DIVIDER_8.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"DIVIDER_8.blo\" -o \"DIVIDER_8.blh\" -omod \"DIVIDER_8\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.blh -o DIVIDER_8.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i DIVIDER_8.bli -o DIVIDER_8.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk divider_8.ltv -map DIVIDER_8.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:03:24 ###########


########## Tcl recorder starts at 05/02/23 02:04:40 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:04:40 ###########


########## Tcl recorder starts at 05/02/23 02:05:15 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:05:15 ###########


########## Tcl recorder starts at 05/02/23 02:05:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:05:19 ###########


########## Tcl recorder starts at 05/02/23 02:05:20 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:05:20 ###########


########## Tcl recorder starts at 05/02/23 02:05:23 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:05:23 ###########


########## Tcl recorder starts at 05/02/23 02:05:23 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:05:23 ###########


########## Tcl recorder starts at 05/02/23 02:05:25 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:05:25 ###########


########## Tcl recorder starts at 05/02/23 02:07:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:07:57 ###########


########## Tcl recorder starts at 05/02/23 02:07:59 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:07:59 ###########


########## Tcl recorder starts at 05/02/23 02:08:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:08:05 ###########


########## Tcl recorder starts at 05/02/23 02:08:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:08:06 ###########


########## Tcl recorder starts at 05/02/23 02:08:07 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:08:07 ###########


########## Tcl recorder starts at 05/02/23 02:11:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:11:06 ###########


########## Tcl recorder starts at 05/02/23 02:11:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:11:06 ###########


########## Tcl recorder starts at 05/02/23 02:11:09 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bls\" -o \"new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i new.bl0 -o new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:11:09 ###########


########## Tcl recorder starts at 05/02/23 02:13:16 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:13:16 ###########


########## Tcl recorder starts at 05/02/23 02:13:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:13:17 ###########


########## Tcl recorder starts at 05/02/23 02:13:18 ##########

# Commands to make the Process: 
# Constraint Editor
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:13:18 ###########


########## Tcl recorder starts at 05/02/23 02:21:10 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:21:10 ###########


########## Tcl recorder starts at 05/02/23 02:22:00 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:22:00 ###########


########## Tcl recorder starts at 05/02/23 02:22:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:22:05 ###########


########## Tcl recorder starts at 05/02/23 02:22:05 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:22:05 ###########


########## Tcl recorder starts at 05/02/23 02:22:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:22:11 ###########


########## Tcl recorder starts at 05/02/23 02:22:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:22:11 ###########


########## Tcl recorder starts at 05/02/23 02:22:13 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:22:13 ###########


########## Tcl recorder starts at 05/02/23 02:24:55 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:24:55 ###########


########## Tcl recorder starts at 05/02/23 02:25:01 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:25:01 ###########


########## Tcl recorder starts at 05/02/23 02:25:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:25:05 ###########


########## Tcl recorder starts at 05/02/23 02:25:05 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:25:05 ###########


########## Tcl recorder starts at 05/02/23 02:25:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:25:09 ###########


########## Tcl recorder starts at 05/02/23 02:25:09 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:25:09 ###########


########## Tcl recorder starts at 05/02/23 02:25:11 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:25:11 ###########


########## Tcl recorder starts at 05/02/23 02:28:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:28:41 ###########


########## Tcl recorder starts at 05/02/23 02:29:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:29:41 ###########


########## Tcl recorder starts at 05/02/23 02:29:54 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:29:54 ###########


########## Tcl recorder starts at 05/02/23 02:29:58 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:29:58 ###########


########## Tcl recorder starts at 05/02/23 02:33:31 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" lab8new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:33:31 ###########


########## Tcl recorder starts at 05/02/23 02:33:35 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:33:35 ###########


########## Tcl recorder starts at 05/02/23 02:33:38 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/02/23 02:33:39 ###########


########## Tcl recorder starts at 05/01/23 08:04:12 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt decode_module_test.wdl -network=CALCULATE -module=CALCULATE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"CALCULATE.blo\" -o \"CALCULATE.blh\" -omod \"CALCULATE\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.blh -o CALCULATE.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i CALCULATE.bli -o CALCULATE.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk decode_module_test.ltv -map CALCULATE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:04:12 ###########


########## Tcl recorder starts at 05/01/23 08:07:13 ##########

# Commands to make the Process: 
# Functional Simulation
if [runCmd "\"$cpld_bin/exp\" -lhdl -ext=.ltv -testpt decode_module_test.wdl -network=CALCULATE -module=CALCULATE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -o CALCULATE.blo  -keepwires -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/iblflink\" \"CALCULATE.blo\" -o \"CALCULATE.blh\" -omod \"CALCULATE\" -err \"automake.err\" "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.blh -o CALCULATE.bli -sweep -mergefb -err automake.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" -i CALCULATE.bli -o CALCULATE.blj -family AMDMACH -idev van -err automake.err -dev lc4k "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Functional Simulation
if [catch {open simcp._sp w} rspFile] {
	puts stderr "Cannot create response file simcp._sp: $rspFile"
} else {
	puts $rspFile "simcp.pre1 -ini simcpls.ini -unit simcp.pre1
-cfg machgen.fdk decode_module_test.ltv -map CALCULATE.lsi
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/simcp\" @simcp._sp"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:07:13 ###########


########## Tcl recorder starts at 05/01/23 08:15:27 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:15:28 ###########


########## Tcl recorder starts at 05/01/23 08:21:51 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:21:51 ###########


########## Tcl recorder starts at 05/01/23 08:25:03 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:25:03 ###########


########## Tcl recorder starts at 05/01/23 08:40:05 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" CALCULATE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:40:05 ###########


########## Tcl recorder starts at 05/01/23 08:40:13 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:40:13 ###########


########## Tcl recorder starts at 05/01/23 08:45:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:41 ###########


########## Tcl recorder starts at 05/01/23 08:45:47 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:47 ###########


########## Tcl recorder starts at 05/01/23 08:45:52 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:52 ###########


########## Tcl recorder starts at 05/01/23 08:45:52 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:52 ###########


########## Tcl recorder starts at 05/01/23 08:45:53 ##########

# Commands to make the Process: 
# Fit Design
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:45:53 ###########


########## Tcl recorder starts at 05/19/23 08:50:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/19/23 08:50:05 ###########


########## Tcl recorder starts at 05/01/23 08:50:25 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:50:25 ###########


########## Tcl recorder starts at 05/01/23 08:50:29 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:50:29 ###########


########## Tcl recorder starts at 05/01/23 08:52:19 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:52:19 ###########


########## Tcl recorder starts at 05/01/23 08:52:23 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:52:23 ###########


########## Tcl recorder starts at 05/01/23 08:55:07 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:55:07 ###########


########## Tcl recorder starts at 05/01/23 08:57:05 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:57:05 ###########


########## Tcl recorder starts at 05/01/23 08:57:07 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:57:07 ###########


########## Tcl recorder starts at 05/01/23 08:59:14 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 08:59:14 ###########


########## Tcl recorder starts at 05/01/23 09:00:18 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:00:18 ###########


########## Tcl recorder starts at 05/01/23 09:03:20 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/01/23 09:03:20 ###########


########## Tcl recorder starts at 05/01/23 09:03:25 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" CALCULATE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:03:25 ###########


########## Tcl recorder starts at 05/01/23 09:04:55 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:04:55 ###########


########## Tcl recorder starts at 05/01/23 09:05:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:05 ###########


########## Tcl recorder starts at 05/01/23 09:05:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:08 ###########


########## Tcl recorder starts at 05/01/23 09:05:08 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:08 ###########


########## Tcl recorder starts at 05/01/23 09:05:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:11 ###########


########## Tcl recorder starts at 05/01/23 09:05:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:11 ###########


########## Tcl recorder starts at 05/01/23 09:05:14 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod lab8new -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:05:14 ###########


########## Tcl recorder starts at 05/01/23 09:08:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:08:02 ###########


########## Tcl recorder starts at 05/01/23 09:08:02 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:08:02 ###########


########## Tcl recorder starts at 05/01/23 09:08:05 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup lab8new.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bls\" -o \"lab8new.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i lab8new.bl0 -o lab8new.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_5_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_5_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_5.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_5.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_5
-lib \"work\" -ver new_lab8.h decoder_5.v
-output_edif DECODER_5.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_5.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_5_lse.env
file delete DECODER_5.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_5.edi -out DECODER_5.bl0 -err automake.err -log DECODER_5.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_5.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODE_MODULE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODE_MODULE.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODE_MODULE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODE_MODULE
-lib \"work\" -ver new_lab8.h decode_module.v
-output_edif DECODE_MODULE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODE_MODULE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODE_MODULE_lse.env
file delete DECODE_MODULE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODE_MODULE.edi -out DECODE_MODULE.bl0 -err automake.err -log DECODE_MODULE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODE_MODULE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"lab8new.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod lab8new @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:08:05 ###########


########## Tcl recorder starts at 05/01/23 09:10:39 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:10:39 ###########


########## Tcl recorder starts at 05/01/23 09:12:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:12:11 ###########


########## Tcl recorder starts at 05/01/23 09:12:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:12:34 ###########


########## Tcl recorder starts at 05/01/23 09:12:46 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:12:46 ###########


########## Tcl recorder starts at 05/01/23 09:12:47 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:12:47 ###########


########## Tcl recorder starts at 05/01/23 09:12:47 ##########

# Commands to make the Process: 
# Generate Schematic Symbol
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/naf2sym\" CALCULATE"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:12:47 ###########


########## Tcl recorder starts at 05/01/23 09:13:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:13:29 ###########


########## Tcl recorder starts at 05/01/23 09:15:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:15:17 ###########


########## Tcl recorder starts at 05/01/23 09:15:27 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:15:27 ###########


########## Tcl recorder starts at 05/01/23 09:15:27 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:15:27 ###########


########## Tcl recorder starts at 05/01/23 09:15:28 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:15:28 ###########


########## Tcl recorder starts at 05/01/23 09:15:33 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:15:33 ###########


########## Tcl recorder starts at 05/01/23 09:15:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:15:34 ###########


########## Tcl recorder starts at 05/01/23 09:15:36 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:15:36 ###########


########## Tcl recorder starts at 05/01/23 09:16:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:16:03 ###########


########## Tcl recorder starts at 05/01/23 09:16:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:16:03 ###########


########## Tcl recorder starts at 05/01/23 09:16:05 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:16:05 ###########


########## Tcl recorder starts at 05/01/23 09:16:54 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:16:54 ###########


########## Tcl recorder starts at 05/01/23 09:18:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:18:19 ###########


########## Tcl recorder starts at 05/01/23 09:18:22 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:18:22 ###########


########## Tcl recorder starts at 05/01/23 09:18:23 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:18:23 ###########


########## Tcl recorder starts at 05/01/23 09:18:23 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:18:23 ###########


########## Tcl recorder starts at 05/01/23 09:18:28 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:18:28 ###########


########## Tcl recorder starts at 05/01/23 09:18:28 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:18:28 ###########


########## Tcl recorder starts at 05/01/23 09:18:30 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:18:30 ###########


########## Tcl recorder starts at 05/01/23 09:20:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:20:08 ###########


########## Tcl recorder starts at 05/01/23 09:20:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:20:11 ###########


########## Tcl recorder starts at 05/01/23 09:20:12 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:20:12 ###########


########## Tcl recorder starts at 05/01/23 09:20:12 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:20:12 ###########


########## Tcl recorder starts at 05/01/23 09:20:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:20:17 ###########


########## Tcl recorder starts at 05/01/23 09:20:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:20:17 ###########


########## Tcl recorder starts at 05/01/23 09:20:19 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:20:19 ###########


########## Tcl recorder starts at 05/01/23 09:24:18 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:24:18 ###########


########## Tcl recorder starts at 05/01/23 09:24:28 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:24:28 ###########


########## Tcl recorder starts at 05/01/23 09:24:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:24:29 ###########


########## Tcl recorder starts at 05/01/23 09:24:29 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:24:29 ###########


########## Tcl recorder starts at 05/01/23 09:24:32 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:24:32 ###########


########## Tcl recorder starts at 05/01/23 09:24:32 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:24:32 ###########


########## Tcl recorder starts at 05/01/23 09:24:34 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:24:34 ###########


########## Tcl recorder starts at 05/01/23 09:26:04 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:26:04 ###########


########## Tcl recorder starts at 05/01/23 09:26:12 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:26:12 ###########


########## Tcl recorder starts at 05/01/23 09:26:17 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:26:17 ###########


########## Tcl recorder starts at 05/01/23 09:26:18 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:26:18 ###########


########## Tcl recorder starts at 05/01/23 09:26:19 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:26:19 ###########


########## Tcl recorder starts at 05/01/23 09:35:41 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:35:41 ###########


########## Tcl recorder starts at 05/01/23 09:35:47 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:35:47 ###########


########## Tcl recorder starts at 05/01/23 09:35:47 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:35:47 ###########


########## Tcl recorder starts at 05/01/23 09:35:49 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:35:49 ###########


########## Tcl recorder starts at 05/01/23 09:44:55 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:44:55 ###########


########## Tcl recorder starts at 05/01/23 09:45:26 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:45:26 ###########


########## Tcl recorder starts at 05/01/23 09:45:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:45:30 ###########


########## Tcl recorder starts at 05/01/23 09:45:31 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:45:31 ###########


########## Tcl recorder starts at 05/01/23 09:45:33 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:45:33 ###########


########## Tcl recorder starts at 05/01/23 09:46:39 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:46:39 ###########


########## Tcl recorder starts at 05/01/23 09:46:44 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:46:44 ###########


########## Tcl recorder starts at 05/01/23 09:46:44 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:46:44 ###########


########## Tcl recorder starts at 05/01/23 09:46:46 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:46:46 ###########


########## Tcl recorder starts at 05/01/23 09:49:16 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:49:16 ###########


########## Tcl recorder starts at 05/01/23 09:49:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:49:24 ###########


########## Tcl recorder starts at 05/01/23 09:49:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:49:24 ###########


########## Tcl recorder starts at 05/01/23 09:49:26 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 09:49:26 ###########


########## Tcl recorder starts at 05/01/23 10:00:39 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:00:39 ###########


########## Tcl recorder starts at 05/01/23 10:02:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:19 ###########


########## Tcl recorder starts at 05/01/23 10:02:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:24 ###########


########## Tcl recorder starts at 05/01/23 10:02:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:24 ###########


########## Tcl recorder starts at 05/01/23 10:02:25 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:25 ###########


########## Tcl recorder starts at 05/01/23 10:02:27 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:27 ###########


########## Tcl recorder starts at 05/01/23 10:02:28 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:28 ###########


########## Tcl recorder starts at 05/01/23 10:02:30 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:30 ###########


########## Tcl recorder starts at 05/01/23 10:02:53 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:53 ###########


########## Tcl recorder starts at 05/01/23 10:02:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:57 ###########


########## Tcl recorder starts at 05/01/23 10:02:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:57 ###########


########## Tcl recorder starts at 05/01/23 10:02:59 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:02:59 ###########


########## Tcl recorder starts at 05/01/23 10:08:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:08:19 ###########


########## Tcl recorder starts at 05/01/23 10:08:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:08:24 ###########


########## Tcl recorder starts at 05/01/23 10:08:24 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:08:24 ###########


########## Tcl recorder starts at 05/01/23 10:08:25 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:08:25 ###########


########## Tcl recorder starts at 05/01/23 10:08:29 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:08:29 ###########


########## Tcl recorder starts at 05/01/23 10:08:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:08:30 ###########


########## Tcl recorder starts at 05/01/23 10:08:32 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:08:32 ###########


########## Tcl recorder starts at 05/01/23 10:08:58 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:08:58 ###########


########## Tcl recorder starts at 05/01/23 10:09:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:03 ###########


########## Tcl recorder starts at 05/01/23 10:09:03 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:03 ###########


########## Tcl recorder starts at 05/01/23 10:09:05 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:05 ###########


########## Tcl recorder starts at 05/01/23 10:09:30 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:30 ###########


########## Tcl recorder starts at 05/01/23 10:09:35 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:35 ###########


########## Tcl recorder starts at 05/01/23 10:09:36 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:36 ###########


########## Tcl recorder starts at 05/01/23 10:09:37 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/01/23 10:09:37 ###########


########## Tcl recorder starts at 05/01/23 10:09:42 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:42 ###########


########## Tcl recorder starts at 05/01/23 10:09:42 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:42 ###########


########## Tcl recorder starts at 05/01/23 10:09:44 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:09:44 ###########


########## Tcl recorder starts at 05/01/23 10:13:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:13:25 ###########


########## Tcl recorder starts at 05/01/23 10:13:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:13:34 ###########


########## Tcl recorder starts at 05/01/23 10:13:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:13:34 ###########


########## Tcl recorder starts at 05/01/23 10:13:35 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/01/23 10:13:35 ###########


########## Tcl recorder starts at 05/01/23 10:14:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:14:05 ###########


########## Tcl recorder starts at 05/01/23 10:14:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:14:06 ###########


########## Tcl recorder starts at 05/01/23 10:14:07 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:14:07 ###########


########## Tcl recorder starts at 05/01/23 10:14:08 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/01/23 10:14:08 ###########


########## Tcl recorder starts at 05/01/23 10:14:12 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:14:12 ###########


########## Tcl recorder starts at 05/01/23 10:14:13 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:14:13 ###########


########## Tcl recorder starts at 05/01/23 10:14:15 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:14:15 ###########


########## Tcl recorder starts at 05/01/23 10:21:11 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:21:11 ###########


########## Tcl recorder starts at 05/01/23 10:21:18 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:21:18 ###########


########## Tcl recorder starts at 05/01/23 10:21:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:21:19 ###########


########## Tcl recorder starts at 05/01/23 10:21:19 ##########

# Commands to make the Process: 
# Compile Schematic
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:21:19 ###########


########## Tcl recorder starts at 05/01/23 10:21:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:21:25 ###########


########## Tcl recorder starts at 05/01/23 10:21:26 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:21:26 ###########


########## Tcl recorder starts at 05/01/23 10:21:27 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/01/23 10:21:27 ###########


########## Tcl recorder starts at 05/01/23 10:28:51 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:28:51 ###########


########## Tcl recorder starts at 05/01/23 10:28:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:28:57 ###########


########## Tcl recorder starts at 05/01/23 10:28:57 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:28:57 ###########


########## Tcl recorder starts at 05/01/23 10:28:58 ##########

# Commands to make the Process: 
# Lattice Synthesize Verilog File
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj

########## Tcl recorder end at 05/01/23 10:28:58 ###########


########## Tcl recorder starts at 05/01/23 10:29:04 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:29:04 ###########


########## Tcl recorder starts at 05/01/23 10:29:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:29:05 ###########


########## Tcl recorder starts at 05/01/23 10:29:07 ##########

# Commands to make the Process: 
# Constraint Editor
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
# Application to view the Process: 
# Constraint Editor
if [catch {open lattice_cmd.rs2 w} rspFile] {
	puts stderr "Cannot create response file lattice_cmd.rs2: $rspFile"
} else {
	puts $rspFile "-nodal -src new_lab8.bl5 -type BLIF -presrc new_lab8.bl3 -crf new_lab8.crf -sif new_lab8.sif -devfile \"$install_dir/ispcpld/dat/lc4k/m4s_256_64.dev\" -lci new_lab8.lct
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lciedit\" @lattice_cmd.rs2"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:29:07 ###########


########## Tcl recorder starts at 05/01/23 10:29:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:29:25 ###########


########## Tcl recorder starts at 05/01/23 10:29:25 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:29:25 ###########


########## Tcl recorder starts at 05/01/23 10:29:27 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bls\" -o \"test.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test.bl0 -o test.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DIVIDER_8_lse.env w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DIVIDER_8.synproj w} rspFile] {
	puts stderr "Cannot create response file DIVIDER_8.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DIVIDER_8
-lib \"work\" -ver new_lab8.h divider_8.v
-output_edif DIVIDER_8.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DIVIDER_8.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DIVIDER_8_lse.env
file delete DIVIDER_8.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DIVIDER_8.edi -out DIVIDER_8.bl0 -err automake.err -log DIVIDER_8.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DIVIDER_8.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DESHAKE_lse.env w} rspFile] {
	puts stderr "Cannot create response file DESHAKE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DESHAKE.synproj w} rspFile] {
	puts stderr "Cannot create response file DESHAKE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DESHAKE
-lib \"work\" -ver new_lab8.h deshake.v
-output_edif DESHAKE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DESHAKE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DESHAKE_lse.env
file delete DESHAKE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DESHAKE.edi -out DESHAKE.bl0 -err automake.err -log DESHAKE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DESHAKE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:29:27 ###########


########## Tcl recorder starts at 05/01/23 10:42:06 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/01/23 10:42:06 ###########


########## Tcl recorder starts at 05/29/23 00:00:05 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/29/23 00:00:05 ###########


########## Tcl recorder starts at 05/29/23 00:00:08 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" display.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" new.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_5.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" lab8.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/29/23 00:00:08 ###########


########## Tcl recorder starts at 05/29/23 00:00:15 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/29/23 00:00:15 ###########


########## Tcl recorder starts at 05/29/23 00:00:19 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" decode_module.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" display.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" divider_8.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" encoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" deshake.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" d_trigger.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" collector.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" led_decoder.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_4.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/vlog2jhd\" decoder_5.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/29/23 00:00:19 ###########


########## Tcl recorder starts at 05/29/23 00:00:34 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/vlog2jhd\" calculate.v -p \"$install_dir/ispcpld/generic\" -predefine new_lab8.h"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/sch2jhd\" test_lab11.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/29/23 00:00:34 ###########


########## Tcl recorder starts at 05/29/23 00:01:12 ##########

# Commands to make the Process: 
# Hierarchy
if [runCmd "\"$cpld_bin/sch2jhd\" test_lab11.sch "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/29/23 00:01:12 ###########


########## Tcl recorder starts at 05/29/23 00:01:23 ##########

# Commands to make the Process: 
# Fit Design
if [runCmd "\"$cpld_bin/sch2blf\" -dev Lattice -sup test_lab11.sch  -err automake.err"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test_lab11.bls\" -o \"test_lab11.bl0\" -ipo  -family -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" -i test_lab11.bl0 -o test_lab11.bl1 -collapse none -reduce none  -err automake.err -keepwires -family"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DISPLAY_lse.env w} rspFile] {
	puts stderr "Cannot create response file DISPLAY_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DISPLAY.synproj w} rspFile] {
	puts stderr "Cannot create response file DISPLAY.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DISPLAY
-lib \"work\" -ver new_lab8.h display.v
-output_edif DISPLAY.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DISPLAY.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DISPLAY_lse.env
file delete DISPLAY.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DISPLAY.edi -out DISPLAY.bl0 -err automake.err -log DISPLAY.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DISPLAY.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open DECODER_4_lse.env w} rspFile] {
	puts stderr "Cannot create response file DECODER_4_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open DECODER_4.synproj w} rspFile] {
	puts stderr "Cannot create response file DECODER_4.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top DECODER_4
-lib \"work\" -ver new_lab8.h decoder_4.v
-output_edif DECODER_4.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"DECODER_4.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete DECODER_4_lse.env
file delete DECODER_4.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf DECODER_4.edi -out DECODER_4.bl0 -err automake.err -log DECODER_4.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" DECODER_4.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open CALCULATE_lse.env w} rspFile] {
	puts stderr "Cannot create response file CALCULATE_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open CALCULATE.synproj w} rspFile] {
	puts stderr "Cannot create response file CALCULATE.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top CALCULATE
-lib \"work\" -ver new_lab8.h calculate.v
-output_edif CALCULATE.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"CALCULATE.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete CALCULATE_lse.env
file delete CALCULATE.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf CALCULATE.edi -out CALCULATE.bl0 -err automake.err -log CALCULATE.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" CALCULATE.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open ENCODER_lse.env w} rspFile] {
	puts stderr "Cannot create response file ENCODER_lse.env: $rspFile"
} else {
	puts $rspFile "FOUNDRY=$install_dir/lse
PATH=$install_dir/lse/bin/nt;%PATH%
"
	close $rspFile
}
if [catch {open ENCODER.synproj w} rspFile] {
	puts stderr "Cannot create response file ENCODER.synproj: $rspFile"
} else {
	puts $rspFile "-a ispMACH400ZE
-d LC4256V
-top ENCODER
-lib \"work\" -ver new_lab8.h encoder.v
-output_edif ENCODER.edi
-optimization_goal Area
-frequency  200
-fsm_encoding_style Auto
-use_io_insertion 1
-resource_sharing 1
-propagate_constants 1
-remove_duplicate_regs 1
-twr_paths  3
-resolve_mixed_drivers 0
"
	close $rspFile
}
if [runCmd "\"$install_dir/lse/bin/nt/synthesis\" -f \"ENCODER.synproj\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete ENCODER_lse.env
file delete ENCODER.synproj
if [runCmd "\"$cpld_bin/edif2blf\" -edf ENCODER.edi -out ENCODER.bl0 -err automake.err -log ENCODER.log -prj new_lab8 -lib \"$install_dir/ispcpld/dat/mach.edn\" -net_Vcc VCC -net_GND GND -nbx -dse -tlw -cvt YES -xor"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" ENCODER.bl0 -collapse none -reduce none -err automake.err  -keepwires"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblflink\" \"test_lab11.bl1\" -o \"new_lab8.bl2\" -omod \"new_lab8\"  -err \"automake.err\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/impsrc\"  -prj new_lab8 -lci new_lab8.lct -log new_lab8.imp -err automake.err -tti new_lab8.bl2 -dir $proj_dir"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -blifopt new_lab8.b2_"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mblifopt\" new_lab8.bl2 -sweep -mergefb -err automake.err -o new_lab8.bl3 @new_lab8.b2_ "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -diofft new_lab8.d0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/mdiofft\" new_lab8.bl3 -family AMDMACH -idev van -o new_lab8.bl4 -oxrf new_lab8.xrf -err automake.err @new_lab8.d0 "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/abelvci\" -vci new_lab8.lct -dev lc4k -prefit new_lab8.l0"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/prefit\" -blif -inp new_lab8.bl4 -out new_lab8.bl5 -err automake.err -log new_lab8.log -mod test_lab11 @new_lab8.l0  -sc"] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [catch {open new_lab8.rs1 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs1: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -nojed -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [catch {open new_lab8.rs2 w} rspFile] {
	puts stderr "Cannot create response file new_lab8.rs2: $rspFile"
} else {
	puts $rspFile "-i new_lab8.bl5 -lci new_lab8.lct -d m4s_256_64 -lco new_lab8.lco -html_rpt -fti new_lab8.fti -fmt PLA -tto new_lab8.tt4 -eqn new_lab8.eq3 -tmv NoInput.tmv
-rpt_num 1
"
	close $rspFile
}
if [runCmd "\"$cpld_bin/lpf4k\" \"@new_lab8.rs2\""] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
file delete new_lab8.rs1
file delete new_lab8.rs2
if [runCmd "\"$cpld_bin/tda\" -i new_lab8.bl5 -o new_lab8.tda -lci new_lab8.lct -dev m4s_256_64 -family lc4k -mod test_lab11 -ovec NoInput.tmv -err tda.err "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}
if [runCmd "\"$cpld_bin/synsvf\" -exe \"$install_dir/ispvmsystem/ispufw\" -prj new_lab8 -if new_lab8.jed -j2s -log new_lab8.svl "] {
	return
} else {
	vwait done
	if [checkResult $done] {
		return
	}
}

########## Tcl recorder end at 05/29/23 00:01:23 ###########

